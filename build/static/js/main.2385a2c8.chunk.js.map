{"version":3,"sources":["utils/util.tsx","components/table-head.tsx","components/table-body.tsx","pages/table.tsx","router.tsx","App.tsx","index.tsx"],"names":["Util","createColumn","arrData","count","id","chargeBackQuantity","percent","percent2","push","createData","columns","this","getColumns","values","map","column","value","columnObj","name","client","chargebackQuantity","chargebackValue","salesAmount","totalValue","chargebackPercent","chargebackTotal","status","utilFunctions","CustomCheckbox","withStyles","theme","createStyles","root","color","lightBlue","checked","Checkbox","CustomIconButton","IconButton","CustomListItemText","primary","fontSize","ListItemText","CustomListItem","backgroundColor","ListItem","CustomTableCell","fontWeight","grey","textTransform","TableCell","CenteredTableCell","textAlign","CustomTableRow","width","TableRow","TableHeadTest","onQuantityChange","onNotCheckedChange","useState","lineQuantity","setLineQuantity","checkValue","setCheckValue","colspan","setColspan","columnsCheck","setColumnsCheck","checkedColumns","getColumnValues","anchorEl","setAnchorEl","open","Boolean","notChecked","setNotChecked","handleChecked","currentIndex","indexOf","newChecked","splice","find","element","handleColumnChecked","option","notCheckedIndex","newNotChecked","Object","entries","columnKey","columnValue","split","align","colSpan","aria-label","aria-controls","aria-haspopup","onClick","event","currentTarget","MoreVertRounded","Menu","keepMounted","onClose","ListSubheader","disableSticky","button","ListItemSecondaryAction","edge","onChange","Divider","data","getData","StripedTableRow","palette","action","hover","CustomTrendingUpRounded","marginRight","TrendingUpRounded","CustomTableCellChargeback","red","formatMonetary","toFixed","toString","replace","formatPercent","useStyles1","makeStyles","flexShrink","marginLeft","spacing","TablePaginationActions","props","classes","useTheme","page","rowsPerPage","onChangePage","className","disabled","direction","LastPageRounded","FirstPageRounded","KeyboardArrowRightRounded","KeyboardArrowLeftRounded","Math","ceil","max","TableTest","setPage","setRowsPerPage","style","Paper","TableContainer","Table","aria-labelledby","size","TableBody","slice","prop","index","scope","component","TableFooter","TablePagination","length","SelectProps","inputProps","native","rowsPerPageOptions","newPage","ActionsComponent","MainTable","Routes","path","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2385a2c8.chunk.js","sourcesContent":["export interface Column {\r\n    name: string,\r\n    value: string\r\n}\r\n\r\nexport interface Data {\r\n    id: number,\r\n    client: string,\r\n    chargebackQuantity: number,\r\n    chargebackValue: number,\r\n    salesAmount: number,\r\n    totalValue: number,\r\n    chargebackPercent: number,\r\n    chargebackTotal: number,\r\n    status: string\r\n}\r\n\r\n\r\nexport default class Util {\r\n\r\n  static createColumn(\r\n    name: string,\r\n    value: string,\r\n  ): Column {\r\n    return { name, value };\r\n  }\r\n\r\n  getColumns(): Column[] {\r\n    return [\r\n      Util.createColumn('Nº Cliente', 'id'),\r\n      Util.createColumn('Cliente', 'client'),\r\n      Util.createColumn('Qtd. Chargeback', 'chargebackQuantity'),\r\n      Util.createColumn('Valor Chargeback', 'chargebackValue'),\r\n      Util.createColumn('Qtd. Vendas', 'salesAmount'),\r\n      Util.createColumn('Valor Total', 'totalValue'),\r\n      Util.createColumn('% Chargeback', 'chargebackPercent'),\r\n      Util.createColumn('% Total Chargeback', 'chargebackTotal'),\r\n      Util.createColumn('Status', 'status'),\r\n    ];\r\n  }\r\n\r\n  static createData(\r\n    id: number,\r\n    client: string,\r\n    chargebackQuantity: number,\r\n    chargebackValue: number,\r\n    salesAmount: number,\r\n    totalValue: number,\r\n    chargebackPercent: number,\r\n    chargebackTotal: number,\r\n    status: string,\r\n  ): Data {\r\n    return {\r\n      id,\r\n      client,\r\n      chargebackQuantity,\r\n      chargebackValue,\r\n      salesAmount,\r\n      totalValue,\r\n      chargebackPercent,\r\n      chargebackTotal,\r\n      status,\r\n    };\r\n  }\r\n\r\n  getData(): Data[] {\r\n    const arrData: Data[] = [];\r\n    let count = 50;\r\n    let id = 0;\r\n    let chargeBackQuantity = 0;\r\n    let percent = 0;\r\n    let percent2 = 0;\r\n    const value = 10000.00;\r\n\r\n    while (count > 0) {\r\n      arrData.push(Util.createData(id += 1, `Cliente Teste ${id}`, chargeBackQuantity += count, 35.00, chargeBackQuantity * 3, value * id, percent += 1.5, percent2 += (3.5 * 0.2), 'On going'));\r\n      count -= 1;\r\n    }\r\n\r\n    return arrData;\r\n  }\r\n\r\n  getColumnValues(): any[] {\r\n    const columns: Column[] = this.getColumns();\r\n    const values: any[] = [];\r\n\r\n    columns.map((column: Column) => {\r\n      const value: string = column.value;\r\n      const columnObj: any = {};\r\n      columnObj[`${value}`] = column.name;\r\n      values.push(columnObj);\r\n      return column;\r\n    })\r\n    return values;\r\n  }\r\n}","import React, { MouseEvent, useState } from 'react';\r\n\r\nimport { TableCell, TableRow, IconButton, Menu, ListItem, ListSubheader, ListItemSecondaryAction, ListItemText, Checkbox, Divider } from '@material-ui/core';\r\nimport { lightBlue, grey } from '@material-ui/core/colors';\r\nimport { MoreVertRounded } from '@material-ui/icons';\r\nimport { withStyles, Theme, createStyles } from '@material-ui/core/styles';\r\n\r\nimport Util, { Column } from '../utils/util';\r\n\r\nconst utilFunctions = new Util();\r\n\r\ninterface Props {\r\n    onNotCheckedChange(value: string[]): void,\r\n    onQuantityChange(value: number): void\r\n}\r\n\r\nconst CustomCheckbox = withStyles((theme: Theme) => (\r\n    createStyles({\r\n        root: {\r\n            color: lightBlue[100],\r\n            '&$checked': {\r\n                color: lightBlue[200],\r\n            },\r\n        },\r\n        checked: {}\r\n    })\r\n))(Checkbox);\r\n\r\nconst CustomIconButton = withStyles((theme: Theme) => (\r\n    createStyles({\r\n        root: {\r\n            color: lightBlue[200]\r\n        }\r\n    })\r\n))(IconButton)\r\n\r\nconst CustomListItemText = withStyles((theme: Theme) => (\r\n    createStyles({\r\n        primary: {\r\n            fontSize: '0.9rem'\r\n        }\r\n    })\r\n))(ListItemText);\r\n\r\nconst CustomListItem = withStyles((theme: Theme) => (\r\n    createStyles({\r\n        root: {\r\n            '&:hover': {\r\n                backgroundColor: lightBlue[50]\r\n            },\r\n        },\r\n    })\r\n))(ListItem)\r\n\r\nconst CustomTableCell = withStyles((theme: Theme) => (\r\n    createStyles({\r\n        root: {\r\n            fontWeight: 'bold',\r\n            color: grey[700],\r\n            textTransform: \"uppercase\"\r\n        }\r\n    })\r\n))(TableCell)\r\n\r\nconst CenteredTableCell = withStyles((theme: Theme) => (\r\n    createStyles({\r\n        root: {\r\n            fontWeight: 'bold',\r\n            color: grey[700],\r\n            textTransform: \"uppercase\",\r\n            textAlign: 'center'\r\n        }\r\n    })\r\n))(TableCell)\r\n\r\nconst CustomTableRow = withStyles(() => (\r\n    createStyles({\r\n        root: {\r\n            width: '100%'\r\n        }\r\n    })\r\n))(TableRow)\r\n\r\nexport default function TableHeadTest({ onQuantityChange, onNotCheckedChange }: Props) {\r\n    const [lineQuantity, setLineQuantity] = useState(50);\r\n    const [checkValue, setCheckValue] = useState(['default']);\r\n\r\n    const [colspan, setColspan] = useState(1);\r\n\r\n    const [columnsCheck, setColumnsCheck] = useState([\r\n        \"id\",\r\n        \"client\",\r\n        \"chargebackQuantity\",\r\n        \"chargebackValue\",\r\n        \"salesAmount\",\r\n        \"totalValue\",\r\n        \"chargebackPercent\",\r\n        \"chargebackTotal\",\r\n        \"status\"\r\n    ]);\r\n    \r\n    const column: Column[] = utilFunctions.getColumns();\r\n\r\n    const checkedColumns: string[] = utilFunctions.getColumnValues();\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const open = Boolean(anchorEl);\r\n\r\n    const [notChecked, setNotChecked] = useState(['']);\r\n\r\n    const handleClick = (event: MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleChecked = (value: string) => () => {\r\n        const currentIndex = checkValue.indexOf(value);\r\n        const newChecked = [...checkValue];\r\n\r\n        if(currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        if (value === 'default' && newChecked.find(element => element === 'fifty')) {\r\n            newChecked.splice(newChecked.indexOf('fifty'), 1);\r\n            setLineQuantity(50);\r\n            onQuantityChange(lineQuantity);\r\n        } else if(value === 'fifty' && newChecked.find(element => element === 'default')) {\r\n            newChecked.splice(newChecked.indexOf('default'), 1);\r\n            setLineQuantity(13);\r\n            onQuantityChange(lineQuantity);\r\n        }\r\n\r\n        setCheckValue(newChecked);\r\n    }\r\n\r\n    const handleColumnChecked = (option: any) => () => {\r\n        const currentIndex = columnsCheck.indexOf(option.value);\r\n        const notCheckedIndex = notChecked.indexOf(option.value);\r\n        const newChecked = [...columnsCheck];\r\n        const newNotChecked = [...notChecked];\r\n        \r\n        if(currentIndex === -1) {\r\n            newNotChecked.splice(notCheckedIndex, 1);\r\n            newChecked.push(option.value);\r\n            setColspan(colspan - 1);\r\n        } else {\r\n            newNotChecked.push(option.value);\r\n            newChecked.splice(currentIndex, 1);\r\n            setColspan(colspan + 1);\r\n        }\r\n\r\n\r\n        setNotChecked(newNotChecked);\r\n        onNotCheckedChange(newNotChecked);\r\n        setColumnsCheck(newChecked);\r\n    }\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n\r\n    return (\r\n        <CustomTableRow>\r\n            {\r\n                checkedColumns.map((columnObj: any) => {\r\n                    return Object.entries(columnObj).map(([columnKey, columnValue]: [string, any]) => {\r\n                        if (!notChecked.find((column: string) => column === columnKey)) {\r\n                            const split = columnValue.split(' ')[0];\r\n                            if(split === 'Qtd.' || split === '%') {\r\n                                return (\r\n                                    <CenteredTableCell>\r\n                                        {columnValue}\r\n                                    </CenteredTableCell>\r\n                                )\r\n                            }                            \r\n                            return (\r\n                                <CustomTableCell>\r\n                                    {columnValue}\r\n                                </CustomTableCell>\r\n                            )\r\n                        }\r\n                        return(<></>);\r\n                    })\r\n                })                    \r\n            }\r\n            <TableCell align=\"right\" colSpan={colspan}>\r\n                <CustomIconButton\r\n                    aria-label=\"more\"\r\n                    aria-controls=\"long-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleClick}\r\n                >\r\n                    <MoreVertRounded />\r\n                </CustomIconButton>\r\n                <Menu\r\n                    id=\"long-menu\"\r\n                    anchorEl={anchorEl}\r\n                    keepMounted\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                >\r\n                    <ListSubheader disableSticky>\r\n                        Linhas por página\r\n                    </ListSubheader>\r\n                    <CustomListItem button onClick={handleChecked('default')}>\r\n                        <CustomListItemText primary=\"Padrão\"/>\r\n                        <ListItemSecondaryAction>\r\n                            <CustomCheckbox \r\n                                edge=\"end\"\r\n                                color=\"primary\"\r\n                                onChange={handleChecked('default')}\r\n                                checked={checkValue.indexOf('default') !== -1}\r\n                            />\r\n                        </ListItemSecondaryAction>\r\n                    </CustomListItem>\r\n                    <CustomListItem button onClick={handleChecked('fifty')}>\r\n                        <CustomListItemText primary=\"50 Linhas\"/>\r\n                        <ListItemSecondaryAction>\r\n                            <CustomCheckbox \r\n                                edge=\"end\"\r\n                                color=\"primary\"\r\n                                onChange={handleChecked('fifty')}\r\n                                checked={checkValue.indexOf('fifty') !== -1}\r\n                            />\r\n                        </ListItemSecondaryAction>\r\n                    </CustomListItem>\r\n\r\n                    <Divider />\r\n\r\n                    <ListSubheader disableSticky>\r\n                        Colunas\r\n                    </ListSubheader>\r\n                    {\r\n                        column.map((option: any) => (\r\n                            <CustomListItem button onClick={handleColumnChecked(option)} >\r\n                                <CustomListItemText primary={option.name}/>\r\n                                <ListItemSecondaryAction>\r\n                                    <CustomCheckbox \r\n                                        edge=\"end\"\r\n                                        color=\"primary\"\r\n                                        onChange={handleColumnChecked(option)}\r\n                                        checked={columnsCheck.indexOf(option.value) !== -1}\r\n                                    />\r\n                                </ListItemSecondaryAction>\r\n                            </CustomListItem>\r\n                        ))\r\n                    }\r\n                </Menu>\r\n            </TableCell>\r\n        </CustomTableRow>\r\n    )\r\n}","import React, { useState, MouseEvent } from 'react';\r\nimport { Paper, Table, TableBody, TableContainer, TablePagination, TableCell, TableRow, TableFooter, IconButton } from '@material-ui/core';\r\nimport { withStyles, Theme, createStyles, makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { lightBlue, red } from '@material-ui/core/colors';\r\nimport { TrendingUpRounded, FirstPageRounded, LastPageRounded, KeyboardArrowRightRounded, KeyboardArrowLeftRounded } from '@material-ui/icons';\r\n\r\nimport './table-body.css';\r\nimport Util, { Data } from '../utils/util';\r\nimport TableHead from './table-head';\r\n\r\nconst utilFunctions = new Util();\r\n\r\nconst data: Data[] = utilFunctions.getData();\r\n\r\nconst StripedTableRow = withStyles((theme: Theme) => createStyles({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n    '&$hover:hover': {\r\n      backgroundColor: lightBlue[50],\r\n    },\r\n  },\r\n  hover: {},\r\n}))(TableRow);\r\n\r\nconst CustomTrendingUpRounded = withStyles(() => (\r\n  createStyles({\r\n    root: {\r\n      marginRight: 15,\r\n    },\r\n  })\r\n))(TrendingUpRounded);\r\n\r\nconst CustomTableCellChargeback = withStyles(() => (\r\n  createStyles({\r\n    root: {\r\n      color: red[500],\r\n      fontSize: '0.85rem',\r\n      textAlign: 'center',\r\n    },\r\n  })\r\n))(TableCell);\r\n\r\nconst CustomTableCell = withStyles(() => (\r\n  createStyles({\r\n    root: {\r\n      fontSize: '0.85rem',\r\n    },\r\n  })\r\n))(TableCell);\r\n\r\nconst CenteredTableCell = withStyles(() => (\r\n  createStyles({\r\n    root: {\r\n      fontSize: '0.85rem',\r\n      textAlign: 'center',\r\n    },\r\n  })\r\n))(TableCell);\r\n\r\nfunction formatMonetary(value: number) {\r\n  return `R$${value.toFixed(2).toString().replace('.', ',')}`;\r\n}\r\n\r\nfunction formatPercent(value: number) {\r\n  return `${value.toFixed(2).toString().replace('.', ',')}%`;\r\n}\r\n\r\ninterface TablePaginationActionsProps {\r\n    count: number;\r\n    page: number;\r\n    rowsPerPage: number;\r\n    onChangePage: (event: MouseEvent<HTMLButtonElement>, newPage: number) => void;\r\n  }\r\n\r\nconst useStyles1 = makeStyles((theme: Theme) => createStyles({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const {\r\n    count, page, rowsPerPage, onChangePage,\r\n  } = props;\r\n\r\n  const handleFirstPageButtonClick = (event: MouseEvent<HTMLButtonElement>) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event: MouseEvent<HTMLButtonElement>) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event: MouseEvent<HTMLButtonElement>) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event: MouseEvent<HTMLButtonElement>) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageRounded /> : <FirstPageRounded />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRightRounded /> : <KeyboardArrowLeftRounded />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeftRounded /> : <KeyboardArrowRightRounded />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageRounded /> : <LastPageRounded />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function TableTest() {\r\n  const [page, setPage] = useState(0);\r\n  const [notChecked, setNotChecked] = useState(['']);\r\n  const [rowsPerPage, setRowsPerPage] = useState(13);\r\n  const columnsCheck: string[] = [\r\n    \"id\",\r\n    \"client\",\r\n    \"chargebackQuantity\",\r\n    \"chargebackValue\",\r\n    \"salesAmount\",\r\n    \"totalValue\",\r\n    \"chargebackPercent\",\r\n    \"chargebackTotal\",\r\n    \"status\"\r\n  ];\r\n\r\n  function onNotCheckedChange(value: string[]) {\r\n    setNotChecked(value);\r\n  }\r\n\r\n  function onQuantityChange(value: number) {\r\n    setRowsPerPage(value);\r\n  }\r\n  const handleChangePage = (event: MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: '100%' }}>\r\n      <Paper className=\"paper\">\r\n        <TableContainer>\r\n          <Table\r\n            className=\"table\"\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <TableBody>\r\n              <TableHead onNotCheckedChange={onNotCheckedChange} onQuantityChange={onQuantityChange} />\r\n              {\r\n                data\r\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  .map((client: Data) => {\r\n                    return (\r\n                      <StripedTableRow\r\n                        hover\r\n                        key={client.id}\r\n                      >\r\n                        {\r\n\r\n                          columnsCheck.map((prop, index) => {\r\n                              if(!notChecked.find((element: string) => element === prop)) {\r\n                                switch(prop) {\r\n                                    case 'id':\r\n                                      return(<CustomTableCell key={ prop + index + client.id } scope=\"row\" component=\"th\">{ client.id }</CustomTableCell>);\r\n                                    case 'client':\r\n                                      return(<CustomTableCell key={ prop + index + client.id }>{ client.client }</CustomTableCell>);\r\n                                    case 'chargebackQuantity':\r\n                                      return(<CenteredTableCell key={ prop + index + client.id }>{ client.chargebackQuantity }</CenteredTableCell>);\r\n                                    case 'chargebackValue':\r\n                                      return(<CustomTableCell key={ prop + index + client.id }>{ formatMonetary(client.chargebackValue) }</CustomTableCell>);\r\n                                    case 'salesAmount':\r\n                                      return(<CenteredTableCell key={ prop + index + client.id }>{ client.salesAmount }</CenteredTableCell>);\r\n                                    case 'totalValue':\r\n                                      return(<CustomTableCell key={ prop + index + client.id }>{ formatMonetary(client.totalValue) }</CustomTableCell>);\r\n                                    case 'chargebackPercent':\r\n                                      return(<CustomTableCellChargeback key={ prop + index + client.id }><CustomTrendingUpRounded fontSize=\"small\" color=\"error\" />{ formatPercent(client.chargebackPercent) }</CustomTableCellChargeback>);\r\n                                    case 'chargebackTotal':\r\n                                      return(<CustomTableCellChargeback key={ prop + index + client.id }><CustomTrendingUpRounded fontSize=\"small\" color=\"error\" />{ formatPercent(client.chargebackTotal) }</CustomTableCellChargeback>);\r\n                                    case 'status':\r\n                                      return(<CustomTableCell key={ prop + index + client.id }>{ client.status }</CustomTableCell>);\r\n                                }\r\n                              }\r\n                              return(\r\n                                <>\r\n                                </>\r\n                              );                \r\n                          })\r\n                        }\r\n                    <TableCell />\r\n                    </StripedTableRow>\r\n                  );\r\n                })\r\n              }\r\n            </TableBody>\r\n            <TableFooter>\r\n              <TableRow>\r\n                <TablePagination\r\n                  colSpan={10}\r\n                  count={data.length}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  SelectProps={{\r\n                    inputProps: { 'aria-label': 'rows per page' },\r\n                    native: false,\r\n                  }}\r\n                  rowsPerPageOptions={[]}\r\n                  onChangePage={handleChangePage}\r\n                  ActionsComponent={TablePaginationActions}\r\n                />\r\n              </TableRow>\r\n            </TableFooter>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport CustomTable from '../components/table-body';\r\n\r\nexport default function MainTable() {\r\n    return (\r\n        <CustomTable />\r\n    )\r\n}","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport Table from './pages/table';\r\n\r\nexport default function Routes() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route path=\"/\" exact component={Table}/>\r\n            </Switch>\r\n        </BrowserRouter>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Routes from './router';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Routes />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}